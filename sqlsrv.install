<?php

/**
 * @file
 * Installation file for sqlsrv module.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_uninstall().
 *
 * Remove cache directory if module is uninstalled.
 */
function sqlsrv_uninstall() {
  
}

function sqlsrv_REData(ReflectionExtension $re) {

    $_data = [];

    $_data['getName'] = $re->getName() ?: NULL;
    $_data['getVersion'] = $re->getVersion() ?: NULL;
    $_data['info'] = $re->info() ?: NULL;
    $_data['getClassName'] = PHP_EOL.implode(", ",$re->getClassNames()) ?: NULL;     
    foreach ($re->getConstants() as $key => $value) $_data['getConstants'] .= "\n{$key}:={$value}";
    $_data['getDependencies'] = $re->getDependencies() ?: NULL;
    $_data['getFunctions'] = PHP_EOL.implode(", ",array_keys($re->getFunctions())) ?: NULL;
    $_data['getINIEntries'] = $re->getINIEntries() ?: NULL;
    $_data['isPersistent'] = $re->isPersistent() ?: NULL;
    $_data['isTemporary'] = $re->isTemporary() ?: NULL;

    return $_data;
}

/**
 * Implements hook_requirements().
 *
 * @status: Needs global revision.
 */
function sqlsrv_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $connection = Database::getConnection();
    $options = $connection->getConnectionOptions();
    $schema = $connection->schema();
    $collation = $schema->getCollation();
    
    // Check encoding
    $requirements['sqlsrv_encoding'] = array(
      'title' => t('SQL Server Driver'),
      'description' => t('Collation for current database'),
      'severity' => REQUIREMENT_OK,
      'value' => t('Current database collation: @collation', array('@collation' => $collation)),
    );

    // Report database version
    $version = $schema->EngineVersion();
    $requirements['sqlsrv_edition'] = array(
      'title' => t('SQL Server Driver'),
      'description' => t('SQL Server version'),
      'severity' => REQUIREMENT_OK,
      'value' => t('Current database engine: "@name" - @version [@level] @edition', 
        array('@version' => $version['VERSION'],
               '@level' => $version['LEVEL'],
               '@edition' => $version['EDITION'],
               '@name' => $options['database'])),
    );
    
    // Report PDO version
    $drivers = \PDO::getAvailableDrivers();
    $extensions = get_loaded_extensions();
    $extensiondata = sqlsrv_REData(new ReflectionExtension('pdo_sqlsrv'));
    $requirements['sqlsrv_pdo'] = array(
      'title' => t('SQL Server Driver'),
      'description' => t('SQL Server PDO Version'),
      'severity' => REQUIREMENT_OK,
      'value' => t('Current SQL Server PDO: @level', 
        array('@level' => $extensiondata['getVersion'])),
    );
    
    // TODO: Report GROUP_CONCAT availability
    
    // TODO: Report install function availability (SUBSTRING, CONCAT, IF, MD5, etc...)
  }

  return $requirements;
}
